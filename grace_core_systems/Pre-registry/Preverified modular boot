from pathlib import Path
import importlib.util
import json
import traceback
import hashlib

# Paths
PRE_VERIFIED_PATH = Path("pre_registry/incoming_verified")
BOOT_LOG_PATH = Path("pre_registry/boot_logs")
BOOT_LOG_PATH.mkdir(parents=True, exist_ok=True)

# Function to load and verify modules dynamically
def load_and_verify_modules():
    boot_results = {}
    for file in PRE_VERIFIED_PATH.glob("*.py"):
        module_name = file.stem
        module_path = str(file.resolve())
        try:
            spec = importlib.util.spec_from_file_location(module_name, module_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)

            # Create a cryptographic ID for this module
            module_id = hashlib.sha256(file.read_bytes()).hexdigest()

            boot_results[module_name] = {
                "Status": "✅ Booted Successfully",
                "ModuleID": module_id,
                "Path": module_path
            }
        except Exception as e:
            boot_results[module_name] = {
                "Status": "❌ Boot Failed",
                "Error": str(e),
                "Traceback": traceback.format_exc()
            }

    # Save boot report
    with open(BOOT_LOG_PATH / "pre_verified_boot_log.json", "w") as log_file:
        json.dump(boot_results, log_file, indent=4)

    return boot_results

load_and_verify_modules()
